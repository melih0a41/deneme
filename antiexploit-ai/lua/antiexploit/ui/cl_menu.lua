--[[
    Client-side Menu
    Admin interface for monitoring
]]

local PANEL = {}

function PANEL:Init()
    self:SetTitle("AI Anti-Exploit System")
    self:SetSize(800, 600)
    self:Center()
    self:SetSizable(true)
    self:SetDraggable(true)
    self:MakePopup()
    
    -- Create property sheet
    self.sheet = vgui.Create("DPropertySheet", self)
    self.sheet:Dock(FILL)
    
    -- Add tabs
    self:AddOverviewTab()
    self:AddThreatsTab()
    self:AddPlayersTab()
    self:AddSettingsTab()
    self:AddLogsTab()
    
    -- Update timer
    timer.Create("AntiExploit_MenuUpdate", 1, 0, function()
        if IsValid(self) then
            self:UpdateData()
        else
            timer.Remove("AntiExploit_MenuUpdate")
        end
    end)
end

function PANEL:AddOverviewTab()
    local panel = vgui.Create("DPanel", self.sheet)
    panel.Paint = function(self, w, h)
        draw.RoundedBox(4, 0, 0, w, h, Color(40, 40, 40))
    end
    
    -- System status
    local status_label = vgui.Create("DLabel", panel)
    status_label:SetPos(10, 10)
    status_label:SetSize(780, 30)
    status_label:SetFont("DermaLarge")
    status_label:SetText("System Status: ACTIVE")
    status_label:SetTextColor(Color(0, 255, 0))
    
    -- Metrics display
    local metrics_panel = vgui.Create("DPanel", panel)
    metrics_panel:SetPos(10, 50)
    metrics_panel:SetSize(780, 200)
    metrics_panel.Paint = function(self, w, h)
        draw.RoundedBox(4, 0, 0, w, h, Color(50, 50, 50))
        
        -- Draw metrics
        draw.SimpleText("AI Accuracy: " .. "95.2%", "DermaDefault", 10, 10, Color(255, 255, 255))
        draw.SimpleText("Threats Detected: " .. "127", "DermaDefault", 10, 30, Color(255, 255, 255))
        draw.SimpleText("False Positives: " .. "3", "DermaDefault", 10, 50, Color(255, 255, 255))
        draw.SimpleText("Server FPS: " .. math.Round(1/engine.TickInterval(), 1), "DermaDefault", 10, 70, Color(255, 255, 255))
    end
    
    self.sheet:AddSheet("Overview", panel, "icon16/shield.png")
end

function PANEL:AddThreatsTab()
    local panel = vgui.Create("DPanel", self.sheet)
    
    -- Threat list
    local threat_list = vgui.Create("DListView", panel)
    threat_list:Dock(FILL)
    threat_list:SetMultiSelect(false)
    threat_list:AddColumn("Time")
    threat_list:AddColumn("Type")
    threat_list:AddColumn("Player")
    threat_list:AddColumn("Confidence")
    threat_list:AddColumn("Action")
    
    -- Populate with dummy data for now
    threat_list:AddLine(os.date("%H:%M:%S"), "CODE_EXECUTION", "Player1", "92%", "BANNED")
    threat_list:AddLine(os.date("%H:%M:%S"), "NETWORK_EXPLOIT", "Player2", "87%", "KICKED")
    
    self.sheet:AddSheet("Threats", panel, "icon16/exclamation.png")
end

function PANEL:AddPlayersTab()
    local panel = vgui.Create("DPanel", self.sheet)
    
    -- Player list
    local player_list = vgui.Create("DListView", panel)
    player_list:Dock(FILL)
    player_list:SetMultiSelect(false)
    player_list:AddColumn("Player")
    player_list:AddColumn("Risk Level")
    player_list:AddColumn("Behavior Score")
    player_list:AddColumn("Actions")
    
    -- Add all players
    for _, ply in ipairs(player.GetAll()) do
        player_list:AddLine(ply:Nick(), "LOW", "0.1", "0")
    end
    
    self.sheet:AddSheet("Players", panel, "icon16/group.png")
end

function PANEL:AddSettingsTab()
    local panel = vgui.Create("DScrollPanel", self.sheet)
    
    local y = 10
    
    -- Threshold settings
    local function AddSlider(text, convar, min, max, decimals)
        local label = vgui.Create("DLabel", panel)
        label:SetPos(10, y)
        label:SetSize(200, 20)
        label:SetText(text)
        
        local slider = vgui.Create("DNumSlider", panel)
        slider:SetPos(220, y)
        slider:SetSize(550, 20)
        slider:SetMin(min)
        slider:SetMax(max)
        slider:SetDecimals(decimals)
        slider:SetValue(0.75) -- Default value
        
        y = y + 30
    end
    
    AddSlider("Warning Threshold", "antiexploit_warn_threshold", 0, 1, 2)
    AddSlider("Kick Threshold", "antiexploit_kick_threshold", 0, 1, 2)
    AddSlider("Ban Threshold", "antiexploit_ban_threshold", 0, 1, 2)
    AddSlider("Learning Rate", "antiexploit_learning_rate", 0.001, 0.1, 3)
    
    self.sheet:AddSheet("Settings", panel, "icon16/wrench.png")
end

function PANEL:AddLogsTab()
    local panel = vgui.Create("DPanel", self.sheet)
    
    -- Log viewer
    local log_text = vgui.Create("DTextEntry", panel)
    log_text:Dock(FILL)
    log_text:SetMultiline(true)
    log_text:SetEditable(false)
    log_text:SetValue("Loading logs...")
    
    -- Export button
    local export_btn = vgui.Create("DButton", panel)
    export_btn:SetText("Export Logs")
    export_btn:SetPos(10, 10)
    export_btn:SetSize(100, 25)
    export_btn:Dock(BOTTOM)
    export_btn.DoClick = function()
        RunConsoleCommand("antiexploit_export_logs")
    end
    
    self.sheet:AddSheet("Logs", panel, "icon16/page_white_text.png")
end

function PANEL:UpdateData()
    -- Request update from server
    net.Start("AntiExploit_RequestUpdate")
    net.SendToServer()
end

vgui.Register("AntiExploitMenu", PANEL, "DFrame")

-- Console command to open menu
concommand.Add("antiexploit_menu", function()
    if LocalPlayer():IsAdmin() then
        if IsValid(AntiExploitMenu) then
            AntiExploitMenu:Remove()
        end
        AntiExploitMenu = vgui.Create("AntiExploitMenu")
    else
        chat.AddText(Color(255, 0, 0), "[AntiExploit] You must be an admin to use this menu!")
    end
end)