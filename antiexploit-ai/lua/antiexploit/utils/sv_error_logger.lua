--[[
    Simple Error Logger Module
    No hooks to prevent stack overflow
]]

AntiExploit.ErrorLogger = {
    errors = {},
    patterns = {},
    daily_log = {},
    error_count = 0,
    last_save = 0
}

-- Initialize error logging
function AntiExploit:InitializeErrorLogger()
    print("[Error Logger] Initializing simple error logging...")
    
    -- Create directories
    if not file.Exists("antiexploit_errors", "DATA") then
        file.CreateDir("antiexploit_errors")
    end
    
    -- Simple timer for saving
    timer.Create("AntiExploit_ErrorSave", 300, 0, function()
        self:SaveErrorLog()
    end)
    
    print("[Error Logger] âœ… Simple logging active (no hooks)")
end

-- Manual error logging function
function AntiExploit:LogError(error_msg, context)
    if not error_msg then return end
    
    local error_entry = {
        message = error_msg,
        context = context or "Unknown",
        timestamp = os.time(),
        date = os.date("%Y-%m-%d %H:%M:%S")
    }
    
    -- Add to error list
    table.insert(self.ErrorLogger.errors, error_entry)
    self.ErrorLogger.error_count = self.ErrorLogger.error_count + 1
    
    -- Keep only last 100 errors
    if #self.ErrorLogger.errors > 100 then
        table.remove(self.ErrorLogger.errors, 1)
    end
end

-- Save error log
function AntiExploit:SaveErrorLog()
    if #self.ErrorLogger.errors == 0 then return end
    
    local date_str = os.date("%Y%m%d")
    local log_file = "antiexploit_errors/errors_" .. date_str .. ".json"
    
    local log_data = {
        date = os.date("%Y-%m-%d"),
        total_errors = self.ErrorLogger.error_count,
        errors = self.ErrorLogger.errors
    }
    
    file.Write(log_file, util.TableToJSON(log_data, true))
    print("[Error Logger] Saved " .. self.ErrorLogger.error_count .. " errors")
end

-- Console commands
concommand.Add("antiexploit_errors", function(ply, cmd, args)
    if not ply:IsAdmin() then return end
    
    local action = args[1] or "list"
    
    if action == "list" then
        print("\n=== Recent Errors ===")
        local count = math.min(10, #AntiExploit.ErrorLogger.errors)
        for i = #AntiExploit.ErrorLogger.errors - count + 1, #AntiExploit.ErrorLogger.errors do
            local error = AntiExploit.ErrorLogger.errors[i]
            if error then
                print(string.format("[%s] %s - %s", error.date, error.context, error.message))
            end
        end
    elseif action == "clear" then
        AntiExploit.ErrorLogger.errors = {}
        AntiExploit.ErrorLogger.error_count = 0
        print("[Error Logger] Cleared all error logs")
    end
end)

print("[Error Logger Module] Loaded - Simple logging (no hooks)")