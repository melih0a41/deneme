--[[
    Helper Functions Module
    Common utility functions
]]

-- Count pattern occurrences
function AntiExploit:CountPattern(text, pattern)
    local count = 0
    local start = 1
    
    while true do
        local match_start, match_end = string.find(text, pattern, start)
        if not match_start then break end
        count = count + 1
        start = match_end + 1
    end
    
    return count
end

-- Calculate string entropy
function AntiExploit:CalculateStringEntropy(str)
    if not str or string.len(str) == 0 then return 0 end
    
    local char_freq = {}
    for i = 1, string.len(str) do
        local char = string.sub(str, i, i)
        char_freq[char] = (char_freq[char] or 0) + 1
    end
    
    local entropy = 0
    local str_len = string.len(str)
    
    for char, freq in pairs(char_freq) do
        local prob = freq / str_len
        if prob > 0 then
            entropy = entropy - (prob * math.log(prob, 2))
        end
    end
    
    return entropy / math.max(1, math.log(str_len, 2))
end

-- Safe table merge
function AntiExploit:MergeTables(target, source)
    for k, v in pairs(source) do
        if type(v) == "table" and type(target[k]) == "table" then
            self:MergeTables(target[k], v)
        else
            target[k] = v
        end
    end
    return target
end

-- Format time
function AntiExploit:FormatTime(seconds)
    if seconds < 60 then
        return math.Round(seconds, 1) .. "s"
    elseif seconds < 3600 then
        return math.Round(seconds / 60, 1) .. "m"
    else
        return math.Round(seconds / 3600, 1) .. "h"
    end
end

-- Get readable threat level
function AntiExploit:GetThreatLevel(confidence)
    if confidence >= AntiExploit.Config.AUTO_BAN_THRESHOLD then
        return "CRITICAL"
    elseif confidence >= AntiExploit.Config.AUTO_KICK_THRESHOLD then
        return "HIGH"
    elseif confidence >= AntiExploit.Config.AUTO_WARN_THRESHOLD then
        return "MEDIUM"
    else
        return "LOW"
    end
end

-- Sanitize string for logging
function AntiExploit:SanitizeString(str)
    if not str then return "" end
    
    -- Remove control characters
    str = string.gsub(str, "%c", " ")
    
    -- Limit length
    if string.len(str) > 200 then
        str = string.sub(str, 1, 200) .. "..."
    end
    
    return str
end

-- Check if player is developer/tester
function AntiExploit:IsPlayerDeveloper(ply)
    if not IsValid(ply) then return false end
    
    local steamid = ply:SteamID64()
    local developer_steamids = {
        -- Add developer Steam IDs here if needed
    }
    
    return table.HasValue(developer_steamids, steamid)
end

-- Generate unique ID
function AntiExploit:GenerateUniqueID()
    return os.time() .. "_" .. math.random(10000, 99999)
end

-- Deep copy table
function AntiExploit:DeepCopy(original)
    local copy
    if type(original) == 'table' then
        copy = {}
        for key, value in next, original, nil do
            copy[self:DeepCopy(key)] = self:DeepCopy(value)
        end
        setmetatable(copy, self:DeepCopy(getmetatable(original)))
    else
        copy = original
    end
    return copy
end

-- Validate Steam ID
function AntiExploit:IsValidSteamID(steamid)
    return string.match(steamid, "^STEAM_%d+:%d+:%d+$") ~= nil
end

-- Get server uptime
function AntiExploit:GetServerUptime()
    return SysTime() - (self.StartTime or 0)
end

-- Format number with commas
function AntiExploit:FormatNumber(num)
    local formatted = tostring(num)
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end