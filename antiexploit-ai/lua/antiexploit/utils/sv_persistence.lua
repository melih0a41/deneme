--[[
    Persistence Module
    Handles saving and loading system state
]]

-- Save system state
function AntiExploit:SaveSystemState()
    if not file.Exists("antiexploit_data", "DATA") then
        file.CreateDir("antiexploit_data")
    end
    
    local system_state = {
        ai_brain = self.AIBrain,
        threat_database = {
            -- Don't save the full database, just additions
            custom_signatures = self.ThreatDatabase.custom_signatures or {},
            learned_patterns = self.LearnedPatterns or {}
        },
        player_assessments = self.PlayerAssessments or {},
        performance_metrics = self:CalculatePerformanceMetrics(),
        version = self.Version,
        timestamp = os.time()
    }
    
    -- Compress neural network data
    if system_state.ai_brain and system_state.ai_brain.neural_network then
        system_state.ai_brain.neural_network_compressed = self:CompressNeuralNetwork(system_state.ai_brain.neural_network)
        system_state.ai_brain.neural_network.weights = nil -- Remove full weights to save space
        system_state.ai_brain.neural_network.biases = nil
    end
    
    file.Write("antiexploit_data/system_state.json", util.TableToJSON(system_state))
    
    if AntiExploit.Config.DEBUG_MODE then
        print("[Persistence] System state saved")
    end
end

-- Load system state
-- Load system state
-- Load system state
function AntiExploit:LoadSystemState()
    if file.Exists("antiexploit_data/system_state.json", "DATA") then
        local data = file.Read("antiexploit_data/system_state.json", "DATA")
        local state = util.JSONToTable(data)
        
        if state and state.version == self.Version then
            -- Load AI brain
            if state.ai_brain then
                self.AIBrain = state.ai_brain
                
                -- Decompress neural network
                if state.ai_brain.neural_network_compressed then
                    local decompressed = self:DecompressNeuralNetwork(state.ai_brain.neural_network_compressed)
                    if self.AIBrain.neural_network then
                        self.AIBrain.neural_network.weights = decompressed.weights
                        self.AIBrain.neural_network.biases = decompressed.biases
                    end
                else
                    -- Weights yoksa yeniden initialize et
                    self:InitializeAIBrain()
                end
            end
            
            -- Load custom patterns - check if ThreatDatabase exists
            if state.threat_database and self.ThreatDatabase then
                if state.threat_database.custom_signatures then
                    self.ThreatDatabase.custom_signatures = state.threat_database.custom_signatures
                end
                if state.threat_database.learned_patterns then
                    self.LearnedPatterns = state.threat_database.learned_patterns
                end
            end
            
            -- Load player assessments
            if state.player_assessments then
                self.PlayerAssessments = state.player_assessments
            end
            
            print("[Persistence] Previous system state loaded")
            return true
        else
            print("[Persistence] Version mismatch, starting fresh")
        end
    end
    return false
end

-- Compress neural network for storage
function AntiExploit:CompressNeuralNetwork(network)
    local compressed = {
        layers = network.layers,
        training_samples = network.training_samples,
        accuracy = network.accuracy,
        weights_compressed = {},
        biases_compressed = {}
    }
    
    -- Simple compression: only store non-zero weights
    for layer, layer_weights in pairs(network.weights or {}) do
        compressed.weights_compressed[layer] = {}
        for neuron, neuron_weights in pairs(layer_weights) do
            compressed.weights_compressed[layer][neuron] = {}
            for prev_neuron, weight in pairs(neuron_weights) do
                if math.abs(weight) > 0.001 then -- Only store significant weights
                    compressed.weights_compressed[layer][neuron][prev_neuron] = weight
                end
            end
        end
    end
    
    -- Store biases
    for layer, layer_biases in pairs(network.biases or {}) do
        compressed.biases_compressed[layer] = layer_biases
    end
    
    return compressed
end

-- Decompress neural network
function AntiExploit:DecompressNeuralNetwork(compressed)
    local network = {
        weights = {},
        biases = {}
    }
    
    -- Reconstruct weights with zeros
    for layer = 1, #compressed.layers - 1 do
        network.weights[layer] = {}
        network.biases[layer] = compressed.biases_compressed[layer] or {}
        
        for neuron = 1, compressed.layers[layer + 1] do
            network.weights[layer][neuron] = {}
            
for prev_neuron = 1, compressed.layers[layer] do
               -- Use stored weight or default to small random value
               if compressed.weights_compressed[layer] and
                  compressed.weights_compressed[layer][neuron] and
                  compressed.weights_compressed[layer][neuron][prev_neuron] then
                   network.weights[layer][neuron][prev_neuron] = 
                       compressed.weights_compressed[layer][neuron][prev_neuron]
               else
                   network.weights[layer][neuron][prev_neuron] = (math.random() * 2 - 1) * 0.01
               end
           end
       end
   end
   
   return network
end

-- Save player data
function AntiExploit:SavePlayerData(steamid, data)
   if not file.Exists("antiexploit_data/players", "DATA") then
       file.CreateDir("antiexploit_data/players")
   end
   
   local player_file = "antiexploit_data/players/" .. steamid .. ".json"
   file.Write(player_file, util.TableToJSON(data))
end

-- Load player data
function AntiExploit:LoadPlayerData(steamid)
   local player_file = "antiexploit_data/players/" .. steamid .. ".json"
   
   if file.Exists(player_file, "DATA") then
       local data = file.Read(player_file, "DATA")
       return util.JSONToTable(data)
   end
   
   return nil
end

-- Backup system state
function AntiExploit:BackupSystemState()
   if not file.Exists("antiexploit_data/backups", "DATA") then
       file.CreateDir("antiexploit_data/backups")
   end
   
   local backup_name = "backup_" .. os.date("%Y%m%d_%H%M%S") .. ".json"
   local current_state = file.Read("antiexploit_data/system_state.json", "DATA")
   
   if current_state then
       file.Write("antiexploit_data/backups/" .. backup_name, current_state)
       
       -- Keep only last 10 backups
       self:CleanOldBackups()
   end
end

-- Clean old backups
function AntiExploit:CleanOldBackups()
   local backups = file.Find("antiexploit_data/backups/*.json", "DATA")
   
   if #backups > 10 then
       -- Sort by name (which includes timestamp)
       table.sort(backups)
       
       -- Remove oldest backups
       for i = 1, #backups - 10 do
           file.Delete("antiexploit_data/backups/" .. backups[i])
       end
   end
end

-- Export configuration
function AntiExploit:ExportConfiguration()
   local config_export = {
       config = AntiExploit.Config,
       custom_patterns = self.ThreatDatabase.custom_signatures or {},
       learned_addons = self.LearnedSafeAddons or {},
       export_date = os.date("%Y-%m-%d %H:%M:%S"),
       version = self.Version
   }
   
   return util.TableToJSON(config_export, true)
end

-- Import configuration
function AntiExploit:ImportConfiguration(json_config)
   local config_data = util.JSONToTable(json_config)
   
   if not config_data then
       return false, "Invalid configuration format"
   end
   
   if config_data.version ~= self.Version then
       return false, "Version mismatch"
   end
   
   -- Apply configuration
   if config_data.config then
       self.Config = self:MergeTables(self.Config, config_data.config)
   end
   
   if config_data.custom_patterns then
       self.ThreatDatabase.custom_signatures = config_data.custom_patterns
   end
   
   if config_data.learned_addons then
       self.LearnedSafeAddons = config_data.learned_addons
   end
   
   return true, "Configuration imported successfully"
end

-- Auto-save timer
timer.Create("AntiExploit_AutoBackup", 3600, 0, function() -- Every hour
   if AntiExploit then
       AntiExploit:BackupSystemState()
   end
end)

-- Save on shutdown
hook.Add("ShutDown", "AntiExploit_SaveOnShutdown", function()
   if AntiExploit then
       AntiExploit:SaveSystemState()
       AntiExploit:FlushLogs()
   end
end)