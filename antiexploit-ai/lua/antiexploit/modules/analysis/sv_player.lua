--[[
    Player Analysis Module
    Analyzes player behavior and actions
]]

function AntiExploit:AnalyzePlayerBehavior(ply)
    -- NPC kontrolü - ÖNEMLİ!
    if not IsValid(ply) then return end
    if not ply:IsPlayer() then return end -- Sadece oyuncular
    if ply:IsBot() then return end -- Bot kontrolü
    if ply:IsNPC() or ply:IsNextBot() then return end -- NPC kontrolü
    
    -- Entity class kontrolü
    local class = ply:GetClass()
    if class and (string.find(class, "npc") or string.find(class, "casino")) then
        return -- NPC entity'leri analiz etme
    end
    
    local steamid = ply:SteamID64()
    if not steamid then return end -- SteamID yoksa NPC olabilir
    
    local current_time = CurTime()
    
    -- Initialize player data if needed
    if not self.PlayerData then self.PlayerData = {} end
    if not self.PlayerData[steamid] then
        self.PlayerData[steamid] = {
            join_time = current_time,
            commands = {},
            movements = {},
            chat_messages = {},
            network_activity = {},
            spawn_events = {},
            behavioral_score = 0
        }
    end
    
    local player_data = self.PlayerData[steamid]
    
    -- Collect current behavior data
    local behavior_snapshot = {
        position = ply:GetPos(),
        velocity = ply:GetVelocity(),
        angles = ply:GetAngles(),
        health = ply:Health(),
        armor = ply:Armor(),
        timestamp = current_time
    }
    
    -- Add to movement history
    table.insert(player_data.movements, behavior_snapshot)
    if #player_data.movements > 50 then
        table.remove(player_data.movements, 1)
    end
    
    -- Analyze behavior patterns
    local behavior_analysis = self:AnalyzeBehaviorPatterns(player_data)
    
    if behavior_analysis.threat_detected then
        self:HandleAutonomousThreat("BEHAVIORAL_ANOMALY", {
            player = ply,
            confidence = behavior_analysis.confidence,
            patterns = behavior_analysis.suspicious_patterns,
            is_threat = true
        })
    end
end

function AntiExploit:AnalyzeBehaviorPatterns(player_data)
    local analysis = {
        threat_detected = false,
        confidence = 0,
        suspicious_patterns = {}
    }
    
    -- Movement analysis
    if #player_data.movements >= 10 then
        local movement_analysis = self:AnalyzeMovementPattern(player_data.movements)
        
        if movement_analysis.is_suspicious then
            analysis.confidence = analysis.confidence + movement_analysis.confidence
            table.insert(analysis.suspicious_patterns, "SUSPICIOUS_MOVEMENT")
        end
    end
    
    -- Command frequency analysis
    if #player_data.commands >= 5 then
        local command_analysis = self:AnalyzeCommandPattern(player_data.commands)
        
        if command_analysis.is_suspicious then
            analysis.confidence = analysis.confidence + command_analysis.confidence
            table.insert(analysis.suspicious_patterns, "COMMAND_SPAM")
        end
    end
    
    -- Chat analysis
    if #player_data.chat_messages >= 3 then
        local chat_analysis = self:AnalyzeChatPattern(player_data.chat_messages)
        
        if chat_analysis.is_suspicious then
            analysis.confidence = analysis.confidence + chat_analysis.confidence
            table.insert(analysis.suspicious_patterns, "CHAT_ANOMALY")
        end
    end
    
    -- Overall threat assessment
    analysis.threat_detected = analysis.confidence > AntiExploit.Config.AUTO_WARN_THRESHOLD
    
    return analysis
end

function AntiExploit:AnalyzeMovementPattern(movements)
    local analysis = {
        is_suspicious = false,
        confidence = 0
    }
    
    if #movements < 10 then return analysis end
    
    -- Calculate average speed
    local total_speed = 0
    local speed_variations = {}
    
    for i = 2, #movements do
        local delta_time = movements[i].timestamp - movements[i-1].timestamp
        if delta_time > 0 then
            local distance = movements[i].position:Distance(movements[i-1].position)
            local speed = distance / delta_time
            total_speed = total_speed + speed
            table.insert(speed_variations, speed)
        end
    end
    
    local avg_speed = total_speed / math.max(1, #speed_variations)
    
    -- Check for unnatural movement
    if avg_speed > 1000 then -- Too fast
        analysis.confidence = analysis.confidence + 0.4
        analysis.is_suspicious = true
    end
    
    -- Check for teleportation
    for i = 2, #movements do
        local distance = movements[i].position:Distance(movements[i-1].position)
        local delta_time = movements[i].timestamp - movements[i-1].timestamp
        
        if delta_time < 0.1 and distance > 500 then -- Teleportation detected
            analysis.confidence = analysis.confidence + 0.6
            analysis.is_suspicious = true
            break
        end
    end
    
    return analysis
end

function AntiExploit:AnalyzeCommandPattern(commands)
    local analysis = {
        is_suspicious = false,
        confidence = 0
    }
    
    if #commands < 5 then return analysis end
    
    -- Check command frequency
    local time_window = AntiExploit.Config.RAPID_COMMANDS_WINDOW
    local recent_commands = 0
    local current_time = CurTime()
    
    for _, cmd in ipairs(commands) do
        if cmd.timestamp and (current_time - cmd.timestamp) < time_window then
            recent_commands = recent_commands + 1
        end
    end
    
    -- Check against threshold
    if recent_commands > AntiExploit.Config.RAPID_COMMANDS_THRESHOLD then
        analysis.is_suspicious = true
        analysis.confidence = 0.7
    end
    
    return analysis
end

function AntiExploit:AnalyzeChatPattern(messages)
    local analysis = {
        is_suspicious = false,
        confidence = 0
    }
    
    if #messages < 3 then return analysis end
    
    -- Check message frequency
    local time_window = AntiExploit.Config.CHAT_SPAM_WINDOW
    local recent_messages = 0
    local current_time = CurTime()
    
    for _, msg in ipairs(messages) do
        if msg.timestamp and (current_time - msg.timestamp) < time_window then
            recent_messages = recent_messages + 1
        end
    end
    
    -- Check against threshold
    if recent_messages > AntiExploit.Config.CHAT_SPAM_THRESHOLD then
        analysis.is_suspicious = true
        analysis.confidence = 0.6
    end
    
    -- Check for repeated messages
    local message_counts = {}
    for _, msg in ipairs(messages) do
        if msg.text then
            message_counts[msg.text] = (message_counts[msg.text] or 0) + 1
        end
    end
    
    for text, count in pairs(message_counts) do
        if count > 3 then
            analysis.is_suspicious = true
            analysis.confidence = math.min(1, analysis.confidence + 0.3)
        end
    end
    
    return analysis
end

function AntiExploit:PerformInitialPlayerAssessment(ply)
    -- NPC kontrolü
    if not IsValid(ply) or not ply:IsPlayer() then return end
    if ply:IsNPC() or ply:IsNextBot() then return end
    
    print("[Initial Assessment] Analyzing new player: " .. ply:Nick())
    
    -- Initial assessment
    local steamid = ply:SteamID64()
    local assessment = {
        player = ply:Nick(),
        steamid = steamid,
        join_time = CurTime(),
        initial_risk = "LOW"
    }
    
    -- Check for suspicious patterns in name
    if string.find(ply:Nick():lower(), "hack") or 
       string.find(ply:Nick():lower(), "exploit") or
       string.find(ply:Nick():lower(), "cheat") then
        assessment.initial_risk = "MEDIUM"
    end
    
    -- Store assessment
    if not self.PlayerAssessments then
        self.PlayerAssessments = {}
    end
    
    self.PlayerAssessments[steamid] = assessment
end

function AntiExploit:AnalyzeChatThreat(text, ply)
    -- NPC kontrolü
    if not IsValid(ply) or not ply:IsPlayer() then 
        return {is_threat = false, confidence = 0}
    end
    
    local threat_assessment = {
        is_threat = false,
        confidence = 0,
        text = text,
        player = ply
    }
    
    -- Analyze chat content
    local suspicious_words = {"hack", "exploit", "cheat", "backdoor", "bypass"}
    
    for _, word in ipairs(suspicious_words) do
        if string.find(text:lower(), word) then
            threat_assessment.confidence = threat_assessment.confidence + 0.3
        end
    end
    
    -- Check for spam patterns
    if string.len(text) > 200 then
        threat_assessment.confidence = threat_assessment.confidence + 0.2
    end
    
    -- Check for repeated characters
    local max_repeat = 0
    local current_repeat = 1
    for i = 2, string.len(text) do
        if string.sub(text, i, i) == string.sub(text, i-1, i-1) then
            current_repeat = current_repeat + 1
            max_repeat = math.max(max_repeat, current_repeat)
        else
            current_repeat = 1
        end
    end
    
    if max_repeat > 10 then
        threat_assessment.confidence = threat_assessment.confidence + 0.3
    end
    
    threat_assessment.is_threat = threat_assessment.confidence > 0.5
    
    return threat_assessment
end