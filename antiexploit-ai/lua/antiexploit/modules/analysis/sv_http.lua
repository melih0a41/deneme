--[[
    HTTP Analysis Module
    Analyzes HTTP requests for threats
]]

function AntiExploit:AnalyzeHTTPRequest(url, caller_info)
    -- Whitelist check first
    if url and (string.find(url, "steamcommunity.com") or 
                string.find(url, "steam-api.com") or
                string.find(url, "github.com") or
                string.find(url, "xeon.network") or
                string.find(url, "googleapis.com")) then
        return {is_threat = false, confidence = 0, indicators = {"WHITELISTED_DOMAIN"}}
    end
    
    local threat_score = 0
    local threat_indicators = {}
    
    -- Check against malicious domains
    for _, domain in ipairs(self.ThreatDatabase.malicious_domains) do
        if string.find(url:lower(), domain) then
            threat_score = threat_score + 0.8
            table.insert(threat_indicators, "MALICIOUS_DOMAIN:" .. domain)
        end
    end
    
    -- Check for encoded URLs
    if string.find(url, "%%") or string.find(url, "data:") then
        threat_score = threat_score + 0.3
        table.insert(threat_indicators, "ENCODED_URL")
    end
    
    -- Check caller source
    if caller_info and caller_info.source == "@" then
        threat_score = threat_score + 0.4
        table.insert(threat_indicators, "UNKNOWN_SOURCE")
    end
    
    -- AI Analysis
    local ai_features = self:ExtractHTTPFeatures(url, caller_info)
    local ai_class, ai_confidence = self:AIPredict(ai_features)
    
    -- Combine scores
    local combined_confidence = (threat_score * 0.6) + (ai_confidence * 0.4)
    
    return {
        is_threat = combined_confidence > AntiExploit.Config.AUTO_WARN_THRESHOLD,
        confidence = combined_confidence,
        indicators = threat_indicators,
        ai_classification = ai_class,
        url = url,
        caller = caller_info
    }
end

function AntiExploit:AnalyzeHTTPPost(url, params, caller_info)
    -- HTTP Post analysis
    local base_assessment = self:AnalyzeHTTPRequest(url, caller_info)
    
    -- Post data analysis
    if params then
        local param_str = type(params) == "table" and util.TableToJSON(params) or tostring(params)
        
        -- Suspicious post data patterns
        if string.find(param_str:lower(), "steamid") or
           string.find(param_str:lower(), "password") or
           string.find(param_str:lower(), "rcon") then
            base_assessment.confidence = base_assessment.confidence + 0.3
            table.insert(base_assessment.indicators, "SUSPICIOUS_POST_DATA")
        end
    end
    
    base_assessment.is_threat = base_assessment.confidence > AntiExploit.Config.AUTO_WARN_THRESHOLD
    return base_assessment
end

function AntiExploit:ExtractHTTPFeatures(url, caller_info)
    local features = {}
    
    -- Initialize features
    for i = 1, 20 do
        features[i] = 0
    end
    
    if url then
        -- URL length
        features[1] = math.min(1, string.len(url) / 200)
        
        -- Domain analysis
        features[2] = string.find(url, "https://") and 0 or 0.5
        features[3] = self:CountPattern(url, "%.") / 10
        features[4] = string.find(url, ":") and self:CountPattern(url, ":") / 5 or 0
        
        -- Suspicious patterns
        features[5] = string.find(url, "ip=") and 1 or 0
        features[6] = string.find(url, "steamid") and 1 or 0
        features[7] = string.find(url, "%%") and 1 or 0
        features[8] = string.find(url, "base64") and 1 or 0
        
        -- Malicious domain check
        for _, domain in ipairs(self.ThreatDatabase.malicious_domains) do
            if string.find(url:lower(), domain) then
                features[9] = 1
                break
            end
        end
    end
    
    -- Caller analysis
    if caller_info then
        features[10] = caller_info.source == "@" and 1 or 0
    end
    
    return features
end