--[[
    Workshop Protection Module
    Protects against workshop backdoors and malicious code
]]

function AntiExploit:DeployWorkshopShield()
    print("[Protection] Deploying Workshop Shield...")
    
    -- HTTP Protection
    if http then
        local original_fetch = http.Fetch
        http.Fetch = function(url, onSuccess, onFailure, headers)
            local threat_assessment = self:AnalyzeHTTPRequest(url, debug.getinfo(2))
            
            if threat_assessment.is_threat then
                self:HandleAutonomousThreat("HTTP_THREAT", threat_assessment)
                return
            end
            
            return original_fetch(url, onSuccess, onFailure, headers)
        end
        
        local original_post = http.Post
        http.Post = function(url, params, onSuccess, onFailure, headers)
            local threat_assessment = self:AnalyzeHTTPPost(url, params, debug.getinfo(2))
            
            if threat_assessment.is_threat then
                self:HandleAutonomousThreat("HTTP_POST_THREAT", threat_assessment)
                return
            end
            
            return original_post(url, params, onSuccess, onFailure, headers)
        end
    end
    
    -- RunString Protection
    if RunString then
        local original_runstring = RunString
        RunString = function(code, identifier, handleError)
            local threat_assessment = self:AnalyzeCodeExecution(code, debug.getinfo(2))
            
            if threat_assessment.is_threat then
                self:HandleAutonomousThreat("CODE_EXECUTION", threat_assessment)
                return nil
            end
            
            -- Auto-learning from safe code
            if AntiExploit.Config.AUTO_LEARNING and threat_assessment.confidence < 0.3 then
                self:LearnFromSafeCode(code, threat_assessment)
            end
            
            return original_runstring(code, identifier, handleError)
        end
    end
    
    -- CompileString Protection
    if CompileString then
        local original_compile = CompileString
        CompileString = function(code, identifier, handleError)
            local threat_assessment = self:AnalyzeCodeCompilation(code, debug.getinfo(2))
            
            if threat_assessment.is_threat then
                self:HandleAutonomousThreat("CODE_COMPILATION", threat_assessment)
                return function() end
            end
            
            return original_compile(code, identifier, handleError)
        end
    end
    
    print("[Protection] âœ… Workshop Shield deployed")
end