--[[
    Memory Protection Module
    Protects against memory manipulation and hook exploits
]]

function AntiExploit:DeployMemoryProtection()
    print("[Protection] Deploying Memory Shield...")
    
    -- Srlion's Hook Library kontrolü
    local has_srlion = false
    if SrlionsHookLibrary or (hook and hook.SrlionVersion) then
        has_srlion = true
        print("[Memory Shield] Detected Srlion's Hook Library, adjusting protection...")
    end
    
    -- Hook protection
    local protected_hooks = {"Think", "PlayerSay", "PlayerInitialSpawn"}
    local original_hook_add = hook.Add
    
    -- Eğer Srlion's Hook Library varsa, korumayı devre dışı bırak
    if not has_srlion then
        hook.Add = function(event, identifier, func)
            -- Nil kontrolü ekle
            if not identifier then
                return original_hook_add(event, identifier, func)
            end
            
            -- identifier'ın string olduğundan emin ol
            identifier = tostring(identifier)
            
            -- Casino ve NPC hook'larını koru
            local protected_identifiers = {
                "pcasino", "pCasino", "casino", "Casino",
                "npc", "NPC", "croupier", "dealer",
                "gmod_hands", "hands" -- gmod_hands eklendi
            }
            
            for _, protected in ipairs(protected_identifiers) do
                if string.find(identifier:lower(), protected:lower()) then
                    -- Bu hook'u koruma, direkt ekle
                    return original_hook_add(event, identifier, func)
                end
            end
            
            -- Normal anti-exploit kontrolü devam etsin
            if table.HasValue(protected_hooks, event) then
                local info = debug.getinfo(2, "S")
                if info and info.source == "@" then
                    print("[Memory Shield] Blocked suspicious hook: " .. event)
                    return false
                end
            end
            
            return original_hook_add(event, identifier, func)
        end
    end
    
    -- Timer protection with special handling
    local original_timer_create = timer.Create
    timer.Create = function(identifier, delay, reps, func)
        -- Nil kontrolü
        if not identifier then
            return original_timer_create(identifier, delay, reps, func)
        end
        
        -- identifier'ın string olduğundan emin ol
        identifier = tostring(identifier)
        
        -- Special whitelist for known addons
        local whitelisted_patterns = {
            "pcasino", "pCasino", "casino", "Casino",
            "npc", "NPC", "animation", "anim",
            "openpermissions", "OpenPermissions",
            "srlion", "hands" -- Srlion ve hands eklendi
        }
        
        for _, pattern in ipairs(whitelisted_patterns) do
            if string.find(identifier:lower(), pattern:lower()) then
                -- Bu timer'ı koruma, direkt oluştur
                return original_timer_create(identifier, delay, reps, func)
            end
        end
        
        -- Check source
        local info = debug.getinfo(2, "S")
        local source = info and info.source or "unknown"
        
        -- Special handling for known addons
        if string.find(source, "openpermissions") then
            -- OpenPermissions için özel limit
            if not AntiExploit.timer_count then
                AntiExploit.timer_count = {}
            end
            
            AntiExploit.timer_count[source] = (AntiExploit.timer_count[source] or 0) + 1
            
            -- OpenPermissions için daha yüksek limit
            if AntiExploit.timer_count[source] > 200 then
                -- Sadece bir kez uyar
                if AntiExploit.timer_count[source] == 201 then
                    print("[Memory Shield] OpenPermissions timer limit reached, blocking further timers")
                end
                return
            end
            
            return original_timer_create(identifier, delay, reps, func)
        end
        
        -- Normal timer koruması
        if not AntiExploit.timer_count then
            AntiExploit.timer_count = {}
        end
        
        AntiExploit.timer_count[source] = (AntiExploit.timer_count[source] or 0) + 1
        
        if AntiExploit.timer_count[source] > 50 then
            print("[Memory Shield] Blocked timer bombing from: " .. source)
            return
        end
        
        return original_timer_create(identifier, delay, reps, func)
    end
    
    print("[Protection] ✅ Memory Shield deployed" .. (has_srlion and " (Srlion compatibility mode)" or ""))
end