--[[
    Network Protection Module
    Protects against network exploits
]]

function AntiExploit:DeployNetworkGuard()
    print("[Protection] Deploying Network Guard...")
    
    -- Net Start Protection
    local original_net_start = net.Start
    net.Start = function(messageName)
        local threat_assessment = self:AnalyzeNetworkMessage(messageName, debug.getinfo(2))
        
        if threat_assessment.is_threat then
            self:HandleAutonomousThreat("NETWORK_EXPLOIT", threat_assessment)
            return false
        end
        
        return original_net_start(messageName)
    end
    
    -- Net Receive Protection
    local original_net_receive = net.Receive
    net.Receive = function(messageName, callback)
        local protected_callback = function(len, ply)
            if self:ValidateNetworkReceive(messageName, ply, len) then
                return callback(len, ply)
            end
        end
        return original_net_receive(messageName, protected_callback)
    end
    
    print("[Protection] âœ… Network Guard deployed")
end

function AntiExploit:ValidateNetworkReceive(messageName, ply, len)
    -- Validate incoming network messages
    if not IsValid(ply) then return false end
    
    -- Check message length
    if len > 65536 then -- 64KB limit
        print("[Network Guard] Blocked oversized message from " .. ply:Nick())
        return false
    end
    
    -- Check player's network activity
    local steamid = ply:SteamID64()
    if not self.PlayerData then self.PlayerData = {} end
    if not self.PlayerData[steamid] then
        self.PlayerData[steamid] = {network_activity = {}}
    end
    
    -- Rate limiting
    local player_data = self.PlayerData[steamid]
    local current_time = CurTime()
    
    -- Clean old entries
    local new_activity = {}
    for _, activity in ipairs(player_data.network_activity) do
        if activity.time > current_time - 10 then
            table.insert(new_activity, activity)
        end
    end
    player_data.network_activity = new_activity
    
    -- Add current activity
    table.insert(player_data.network_activity, {
        message = messageName,
        time = current_time,
        length = len
    })
    
    -- Check rate
    if #player_data.network_activity > 100 then
        print("[Network Guard] Rate limit exceeded for " .. ply:Nick())
        return false
    end
    
    return true
end