--[[
    Loki Menu Specific Detection
    Detects Loki exploit menu patterns
]]

-- Add Loki-specific signatures to threat database
function AntiExploit:AddLokiSignatures()
    local loki_signatures = {
        -- Network messages (BUNLAR GERÇEK EXPLOIT MESAJLARI)
        "loki_menu_net", "LOKI_EXPLOIT_NET", "loki_backdoor", "loki_execute",
        "lokinet_exploit", "loki_bypass_net", "LOKI_HAX", "loki_cheat_net",
        "citizen_hack_net", "aimware_net", "skeet_net", "exploit_menu_net",
        
        -- Obfuscated versions
        "l0k1_n3t", "L0K1_H4X", "10k1_expl01t", "l0k!_m3nu",
        
        -- Base64/Hex encoded exploit signatures
        "bG9raV9leHBsb2l0", -- "loki_exploit" base64
        "6C6F6B695F6861636B", -- "loki_hack" hex
        
        -- Common exploit network messages
        "backdoor_net", "exploit_cmd", "bypass_ac", "force_admin",
        "give_superadmin", "lua_run_net", "execute_lua", "run_exploit",
        "money_hack", "godmode_enable", "noclip_bypass", "esp_enable"
    }
    
    -- Add to network signatures
    for _, sig in ipairs(loki_signatures) do
        if not table.HasValue(self.ThreatDatabase.network_signatures, sig) then
            table.insert(self.ThreatDatabase.network_signatures, sig)
        end
    end
    
    -- Add Loki HTTP endpoints
    local loki_domains = {
        "loki-hack.com", "lokimenu.net", "loki-exploit.ru",
        "lokicheat.xyz", "loki.cc", "l0ki.pw",
        "citizenhack.net", "aimware.net", "exploits.download"
    }
    
    for _, domain in ipairs(loki_domains) do
        if not table.HasValue(self.ThreatDatabase.malicious_domains, domain) then
            table.insert(self.ThreatDatabase.malicious_domains, domain)
        end
    end
    
    print("[Loki Detection] Added " .. #loki_signatures .. " Loki signatures")
end

-- Detect Loki-specific behavior patterns
function AntiExploit:DetectLokiBehavior(ply)
    if not IsValid(ply) then return false end
    
    local steamid = ply:SteamID64()
    local player_data = self.PlayerData[steamid]
    
    if not player_data then return false end
    
    -- Loki specific patterns
    local loki_indicators = 0
    
    -- Check for rapid prop spawning (common Loki feature)
    local recent_spawns = 0
    for _, spawn in ipairs(player_data.spawn_events or {}) do
        if CurTime() - spawn.time < 10 then
            recent_spawns = recent_spawns + 1
        end
    end
    
    if recent_spawns > 20 then
        loki_indicators = loki_indicators + 2
    end
    
    -- Check for instant money changes (Loki money hack)
    if DarkRP and player_data.last_money then
        local current_money = ply:getDarkRPVar("money") or 0
        local money_diff = current_money - player_data.last_money
        
        if money_diff > 1000000 then -- Instant 1M+
            loki_indicators = loki_indicators + 3
        end
    end
    
    -- Check for suspicious network activity
    if player_data.network_activity then
        for _, activity in ipairs(player_data.network_activity) do
            if activity.message and self:IsExploitNetworkMessage(activity.message) then
                loki_indicators = loki_indicators + 5
                break
            end
        end
    end
    
    return loki_indicators >= 3
end

-- Check if network message is exploit-related
function AntiExploit:IsExploitNetworkMessage(msg)
    -- WHITELIST - Güvenli network mesajları
    local safe_patterns = {
        "^gmodadminsuite:",     -- GmodAdminSuite
        "^gas_",                -- gmodadminsuite alternatif prefix
        "^sam_",                -- SAM admin mod
        "^ulx_",                -- ULX admin mod
        "^fadmin_",             -- FAdmin
        "^darkrp_",             -- DarkRP
        "^xenin_",              -- Xenin Framework
        "^billy_",              -- Billy's addons
        "^vcmod_",              -- VCMod
        "^pac_",                -- PAC3
        "^wire_",               -- Wiremod
        "^acf_",                -- ACF
        "^m9k_",                -- M9K weapons
        "^tfa_",                -- TFA weapons
        "^arccw_",              -- ArcCW weapons
        "^simfphys_",           -- Simfphys
        "^photon_",             -- Photon lighting
        "^properties_",         -- Sandbox properties
        "^context_",            -- Context menu
        "^spawnmenu_",          -- Spawnmenu
        "^npc_",                -- NPC related
        "^prop_",               -- Prop related
        "^bkeypads",            -- Billy's Keypads
        "^bricks_",             -- Bricks addons
        "^zeros_",              -- Zeros addons
        "^ch_",                 -- CH Systems
        "^rphone",              -- gPhone/rPhone
        "^atlaschat",           -- AtlasChat
        "^easychat",            -- EasyChat
    }
    
    -- Whitelist kontrolü
    local lower_msg = string.lower(msg)
    for _, pattern in ipairs(safe_patterns) do
        if string.find(lower_msg, pattern) then
            return false -- Güvenli, exploit değil
        end
    end
    
    -- GERÇEK exploit patterns
    local exploit_patterns = {
        -- Backdoor/exploit specific
        "backdoor", "forcenet", "bypass", 
        "hack", "cheat", "exploit",
        -- Suspicious patterns
        "lua_run_net", "execute_lua", "run_exploit",
        "give_superadmin", "force_admin", "admin_force",
        -- Known exploit signatures
        "loki_menu_net", "citizen_hack_net", "aimware_net",
        "LOKI_EXPLOIT", "HACK_NET", "EXPLOIT_CMD",
        -- Money/advantage exploits
        "money_hack", "give_money", "spawn_money",
        "godmode_enable", "noclip_bypass", "esp_enable"
    }
    
    -- Exploit pattern kontrolü
    for _, pattern in ipairs(exploit_patterns) do
        if string.find(lower_msg, pattern) then
            return true -- Bu gerçekten exploit
        end
    end
    
    -- Suspicious format patterns
    -- Hex string (20+ karakter)
    if string.match(msg, "^[0-9A-Fa-f]+$") and string.len(msg) > 20 then
        return true
    end
    
    -- Base64 pattern (ama whitelist'te değilse)
    if string.match(msg, "^[A-Za-z0-9+/]+=*$") and string.len(msg) > 30 then
        return true
    end
    
    -- All caps with underscores (ama whitelist'te değilse)
    if string.match(msg, "^[A-Z0-9_]+$") and string.len(msg) > 15 then
        -- Admin addon'ları genelde böyle, ekstra kontrol
        local admin_words = {"ADMIN", "MOD", "SUITE", "SYSTEM", "SERVER", "STAFF", "GAMEMODE"}
        for _, word in ipairs(admin_words) do
            if string.find(msg, word) then
                return false -- Muhtemelen legit admin addon
            end
        end
        return true
    end
    
    return false -- Default: güvenli kabul et
end

-- Override net.Start to catch exploit attempts
local original_net_start = net.Start
net.Start = function(messageName)
    -- Check if this is an exploit network message
    if AntiExploit:IsExploitNetworkMessage(messageName) then
        -- Get the calling player (if server-side)
        local info = debug.getinfo(2)
        
        print("[Loki Detection] BLOCKED exploit network message: " .. messageName)
        
        -- Try to find the player who sent this
        for _, ply in ipairs(player.GetAll()) do
            -- This is a simplified check, in reality we'd need more context
            if ply:IsValid() then
                local threat_data = {
                    player = ply,
                    confidence = 0.95,
                    indicators = {"EXPLOIT_NET_MESSAGE", "MESSAGE: " .. messageName},
                    is_threat = true,
                    threat_type = "EXPLOIT_MENU_NETWORK"
                }
                
                AntiExploit:HandleAutonomousThreat("EXPLOIT_NETWORK_DETECTED", threat_data)
                break
            end
        end
        
        return -- Block the message
    end
    
    return original_net_start(messageName)
end

-- Monitor console commands instead of chat
hook.Add("PlayerSay", "AntiExploit_LokiChatDetect", function(ply, text)
    -- REMOVED - We don't want to ban for chat commands
    -- SAM, ULX etc use !commands legitimately
end)

-- Monitor actual console commands
local original_concommand_run = concommand.Run
concommand.Run = function(ply, cmd, args, argStr)
    -- Check for suspicious console commands
    local suspicious_commands = {
        "lua_run", "lua_run_cl", "ulx_lua_run",
        "rcon", "sv_cheats", "host_timescale",
        "ent_create", "ent_fire"
    }
    
    for _, sus_cmd in ipairs(suspicious_commands) do
        if string.find(cmd:lower(), sus_cmd) then
            if IsValid(ply) and not ply:IsAdmin() then
                print("[Loki Detection] Blocked suspicious command: " .. cmd .. " from " .. ply:Nick())
                
                local threat_data = {
                    player = ply,
                    confidence = 0.85,
                    indicators = {"SUSPICIOUS_COMMAND", "CMD: " .. cmd},
                    is_threat = true,
                    threat_type = "COMMAND_EXPLOIT"
                }
                
                AntiExploit:HandleAutonomousThreat("SUSPICIOUS_COMMAND", threat_data)
                return
            end
        end
    end
    
    return original_concommand_run(ply, cmd, args, argStr)
end

-- Initialize Loki detection
hook.Add("Initialize", "AntiExploit_LokiDetection", function()
    timer.Simple(2, function()
        if AntiExploit then
            AntiExploit:AddLokiSignatures()
        end
    end)
end)

print("[Loki Detection Module] Loaded - Network exploit detection active")