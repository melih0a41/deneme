--[[
    NPC Protection Module
    Special protection for NPCs to prevent false positives
]]

-- NPC Whitelist and Protection System
AntiExploit.NPCProtection = {
    whitelist = {},
    casino_npcs = {},
    last_positions = {},
    initialized = false,
    last_npc_count = 0 -- Yeni eklendi
}

-- Initialize NPC protection
function AntiExploit:InitializeNPCProtection()
    if self.NPCProtection.initialized then return end
    
    print("[NPC Protection] Initializing NPC protection system...")
    
    -- Find all NPCs after spawn
    timer.Simple(2, function()
        self:FindAndWhitelistNPCs(true) -- İlk çalıştırmada log göster
    end)
    
    -- Periodic NPC check - SADECE YENİ NPC'LER İÇİN
    timer.Create("AntiExploit_NPCWhitelist", 5, 0, function()
        self:UpdateNPCWhitelist()
    end)
    
    self.NPCProtection.initialized = true
    print("[NPC Protection] ✅ System initialized")
end

-- Find and whitelist all NPCs
function AntiExploit:FindAndWhitelistNPCs(show_log)
    local npc_count = 0
    local new_npcs = 0
    
    for _, ent in ipairs(ents.GetAll()) do
        if self:IsNPCEntity(ent) then
            local id = self:GetNPCIdentifier(ent)
            
            -- Yeni NPC mi kontrol et
            if not self.NPCProtection.whitelist[id] then
                new_npcs = new_npcs + 1
                
                self.NPCProtection.whitelist[id] = {
                    entity = ent,
                    class = ent:GetClass(),
                    model = ent:GetModel(),
                    pos = ent:GetPos(),
                    is_casino = self:IsCasinoNPC(ent)
                }
                
                -- Casino NPC special list
                if self:IsCasinoNPC(ent) then
                    self.NPCProtection.casino_npcs[id] = true
                end
            end
            
            npc_count = npc_count + 1
        end
    end
    
    -- Sadece değişiklik varsa veya ilk çalıştırmada log göster
    if show_log or new_npcs > 0 then
        if new_npcs > 0 then
            print("[NPC Protection] Added " .. new_npcs .. " new NPCs to whitelist (Total: " .. npc_count .. ")")
        elseif show_log then
            print("[NPC Protection] Found and whitelisted " .. npc_count .. " NPCs")
        end
    end
    
    self.NPCProtection.last_npc_count = npc_count
end

-- Check if entity is NPC
function AntiExploit:IsNPCEntity(ent)
    if not IsValid(ent) then return false end
    
    -- Standard NPC checks
    if ent:IsNPC() or ent:IsNextBot() then
        return true
    end
    
    -- Class based check
    local npc_classes = {
        "npc_",
        "pcasino_",
        "casino_npc",
        "croupier",
        "dealer"
    }
    
    local class = ent:GetClass()
    for _, prefix in ipairs(npc_classes) do
        if string.find(class, prefix) then
            return true
        end
    end
    
    -- Model based check (for casino NPCs)
    local model = ent:GetModel()
    if model and (string.find(model, "hostage") or string.find(model, "breen")) then
        -- Position check - stationary entities
        if ent:GetVelocity():Length() < 1 then
            return true
        end
    end
    
    return false
end

-- Check if casino NPC
function AntiExploit:IsCasinoNPC(ent)
    if not IsValid(ent) then return false end
    
    local class = ent:GetClass()
    local model = ent:GetModel()
    
    -- pCasino NPC checks
    if string.find(class, "pcasino") or string.find(class, "casino") then
        return true
    end
    
    -- Model checks
    if model and (string.find(model, "hostage") or string.find(model, "breen")) then
        -- Check for nearby casino entities
        local nearby = ents.FindInSphere(ent:GetPos(), 200)
        for _, near_ent in ipairs(nearby) do
            if string.find(near_ent:GetClass(), "casino") then
                return true
            end
        end
    end
    
    return false
end

-- Get NPC identifier
function AntiExploit:GetNPCIdentifier(ent)
    if not IsValid(ent) then return nil end
    return ent:EntIndex() .. "_" .. ent:GetClass()
end

-- Update NPC whitelist - SADECE TEMİZLEME VE YENİ NPC'LER
function AntiExploit:UpdateNPCWhitelist()
    -- Clean invalid ones first
    local removed = 0
    for id, data in pairs(self.NPCProtection.whitelist) do
        if not IsValid(data.entity) then
            self.NPCProtection.whitelist[id] = nil
            self.NPCProtection.casino_npcs[id] = nil
            removed = removed + 1
        end
    end
    
    if removed > 0 then
        print("[NPC Protection] Cleaned " .. removed .. " invalid NPCs from whitelist")
    end
    
    -- Add only new NPCs (log göstermeden)
    self:FindAndWhitelistNPCs(false)
end

-- AnalyzePlayerBehavior fonksiyonunu override et - DAHA GÜÇLÜ
local original_analyze = AntiExploit.AnalyzePlayerBehavior
AntiExploit.AnalyzePlayerBehavior = function(self, ent)
    -- Önce entity geçerliliğini kontrol et
    if not IsValid(ent) then return end
    
    -- Oyuncu olmayan her şeyi reddet
    if not ent:IsPlayer() then return end
    
    -- Bot ve NPC kontrolleri
    if ent:IsBot() or ent:IsNPC() or ent:IsNextBot() then
        return
    end
    
    -- Class bazlı kontrol
    local class = ent:GetClass()
    if class then
        local lower_class = string.lower(class)
        if string.find(lower_class, "npc") or 
           string.find(lower_class, "casino") or
           string.find(lower_class, "croupier") or
           string.find(lower_class, "dealer") then
            return
        end
    end
    
    -- Model bazlı kontrol
    local model = ent:GetModel()
    if model then
        local lower_model = string.lower(model)
        if string.find(lower_model, "hostage") or 
           string.find(lower_model, "breen") then
            -- Casino NPC modelleri - analiz etme
            return
        end
    end
    
    -- SteamID kontrolü - gerçek oyuncu mu?
    local steamid = ent:SteamID64()
    if not steamid or steamid == "" or steamid == "0" then
        return -- SteamID yoksa NPC olabilir
    end
    
    -- Whitelist kontrolü
    local id = ent:EntIndex() .. "_" .. ent:GetClass()
    if self.NPCProtection and self.NPCProtection.whitelist and self.NPCProtection.whitelist[id] then
        return -- Whitelisted NPC
    end
    
    -- Normal oyuncu analizi devam etsin
    if original_analyze then
        return original_analyze(self, ent)
    end
end

-- Initialize on system start
hook.Add("InitPostEntity", "AntiExploit_NPCProtection_Init", function()
    timer.Simple(1, function()
        if AntiExploit then
            AntiExploit:InitializeNPCProtection()
        end
    end)
end)

-- Debug commands (optional)
if SERVER then
    concommand.Add("antiexploit_debug_npcs", function(ply)
        if not ply:IsAdmin() then return end
        
        print("\n[NPC Debug] Whitelisted NPCs:")
        local count = 0
        for id, data in pairs(AntiExploit.NPCProtection.whitelist) do
            if IsValid(data.entity) then
                count = count + 1
                if count <= 10 then -- İlk 10 NPC'yi göster
                    print(string.format("- %s | Class: %s | Casino: %s", 
                        id, data.class, data.is_casino and "YES" or "NO"))
                end
            end
        end
        
        print("\n[NPC Debug] Total: " .. table.Count(AntiExploit.NPCProtection.whitelist))
    end)
    
    concommand.Add("antiexploit_stop_monitoring", function(ply)
        if not ply:IsAdmin() then return end
        
        if timer.Exists("AntiExploit_PlayerMonitoring") then
            timer.Remove("AntiExploit_PlayerMonitoring")
            print("[AntiExploit] Player monitoring stopped")
            ply:ChatPrint("[AntiExploit] Player monitoring stopped")
        end
    end)
    
    concommand.Add("antiexploit_start_monitoring", function(ply)
        if not ply:IsAdmin() then return end
        
        if AntiExploit and AntiExploit.StartRealTimeMonitoring then
            AntiExploit:StartRealTimeMonitoring()
            ply:ChatPrint("[AntiExploit] Player monitoring restarted")
        end
    end)
end