--[[
    Core Main Module
    Central system initialization and coordination
]]

function AntiExploit:Initialize()
    -- Initialize all required tables FIRST
    self.ThreatDatabase = self.ThreatDatabase or {
        known_exploits = {},
        workshop_threats = {},
        network_signatures = {},
        behavioral_patterns = {},
        confidence_matrix = {},
        malicious_domains = {},
        custom_signatures = {}
    }
    
    self.PlayerData = self.PlayerData or {}
    self.PlayerAssessments = self.PlayerAssessments or {}
    self.LearnedPatterns = self.LearnedPatterns or {hooks = {}, networks = {}, addons = {}}
    self.LearnedSafeAddons = self.LearnedSafeAddons or {}
    self.timer_count = self.timer_count or {}
    
    -- THEN load previous state if available
    self:LoadSystemState()
    
    -- Initialize all systems
    self:InitializeAutonomousSystem()
    
    -- Auto-save timer
    timer.Create("AntiExploit_AutoSave", AntiExploit.Config.AUTO_SAVE_INTERVAL, 0, function()
        self:SaveSystemState()
    end)
    
    -- Welcome message
    timer.Simple(5, function()
        print("ü§ñ AUTONOMOUS AI READY")
        print("üõ°Ô∏è Zero admin intervention required")
        print("‚ö° Server is now fully protected")
        print("üß† AI learning continuously")
    end)
end

function AntiExploit:InitializeAutonomousSystem()
    print("ü§ñ AUTONOMOUS AI ANTI-EXPLOIT SYSTEM")
    print(string.rep("=", 60))
    print("Version: " .. self.Version)
    print("Mode: FULLY AUTONOMOUS (Zero Admin Required)")
    print("Learning: ACTIVE")
    print("Adaptation: ACTIVE")
    print(string.rep("=", 60))
    
    -- Core systems
    self:InitializeAIBrain()
    self:LoadThreatDatabase()
    self:StartAutonomousLearning()
    self:InitializeAutoOptimization()
    
    -- Auto-protect all systems
    self:DeployComprehensiveProtection()
    
    print("‚úÖ AUTONOMOUS SYSTEM FULLY OPERATIONAL")
    print("‚ö° All protection systems: ACTIVE")
    print("üß† AI Learning: AUTONOMOUS")
    print("üöÄ Auto-optimization: ACTIVE")
    print("üõ°Ô∏è Zero admin intervention required")
    print(string.rep("=", 60))
end

function AntiExploit:DeployComprehensiveProtection()
    -- Workshop Protection
    self:DeployWorkshopShield()
    
    -- Network Protection
    self:DeployNetworkGuard()
    
    -- Memory Protection
    self:DeployMemoryProtection()
    
    -- Behavioral Protection
    self:DeployBehavioralProtection()
    
    -- Code Injection Protection
    self:DeployCodeProtection()
    
    -- Real-time monitoring
    self:StartRealTimeMonitoring()
end

function AntiExploit:StartRealTimeMonitoring()
    -- Real-time player monitoring - SADECE GER√áEK OYUNCULAR
    timer.Create("AntiExploit_PlayerMonitoring", AntiExploit.Config.PLAYER_MONITOR_INTERVAL, 0, function()
        for _, ply in ipairs(player.GetAll()) do
            if IsValid(ply) and ply:IsPlayer() and not ply:IsBot() and not ply:IsAdmin() then
                -- Ekstra NPC kontrol√º
                if not ply:IsNPC() and not ply:IsNextBot() then
                    local class = ply:GetClass()
                    if not (class and string.find(class, "npc")) then
                        self:AnalyzePlayerBehavior(ply)
                    end
                end
            end
        end
    end)
    
    -- System health monitoring
    timer.Create("AntiExploit_SystemHealth", AntiExploit.Config.SYSTEM_HEALTH_INTERVAL, 0, function()
        self:MonitorSystemHealth()
    end)
    
    print("[Monitoring] ‚úÖ Real-time monitoring active")
end

function AntiExploit:MonitorSystemHealth()
    local fps = 1 / engine.TickInterval()
    local memory_usage = collectgarbage("count")
    local player_count = #player.GetAll()
    
    -- Check system performance
    if fps < AntiExploit.Config.MIN_FPS_THRESHOLD then
        print("[System Health] Low FPS detected: " .. math.Round(fps, 1))
        self:ReduceMonitoringLoad()
    end
    
    if memory_usage > AntiExploit.Config.MAX_MEMORY_MB * 1024 then
        print("[System Health] High memory usage: " .. math.Round(memory_usage/1024, 1) .. "MB")
        collectgarbage("collect")
    end
    
    -- Log system status
    if player_count > 0 and AntiExploit.Config.VERBOSE_LOGGING then
        print(string.format("[System Health] FPS: %.1f | Memory: %.1fMB | Players: %d", 
                           fps, memory_usage/1024, player_count))
    end
end

function AntiExploit:ReduceMonitoringLoad()
    if timer.Exists("AntiExploit_PlayerMonitoring") then
        timer.Adjust("AntiExploit_PlayerMonitoring", 2)
        print("[Auto-Tune] Reduced monitoring frequency due to low FPS")
    end
end