--[[
    Threat Database Module
    Stores and manages threat signatures
]]

function AntiExploit:LoadThreatDatabase()
    -- Initialize threat database
    self.ThreatDatabase = {
        known_exploits = {},
        workshop_threats = {},
        network_signatures = {},
        behavioral_patterns = {},
        confidence_matrix = {},
        malicious_domains = {}
    }
    
    -- Workshop backdoor signatures
    self.ThreatDatabase.workshop_threats = {
        -- HTTP/Network threats
        "http.Fetch", "http.Post", "http.Get", "HTTPRequest",
        
        -- Code execution threats
        "RunString", "CompileString", "loadstring", "dofile",
        "debug.getupvalue", "debug.setupvalue", "getfenv", "setfenv",
        
        -- File system threats
        "file.Write", "file.Delete", "file.Append", "file.CreateDir",
        
        -- Network exploitation
        "BroadcastLua", "SendLua", "net.Start", "net.Broadcast",
        
        -- Console/Command threats
        "ulx luarun", "lua_run", "rcon ", "quit", "exit", "shutdown",
        
        -- Environment manipulation
        "_G[", "rawget", "rawset", "getmetatable", "setmetatable",
        
        -- Encoding/Obfuscation
        "util.Base64Decode", "util.Base64Encode", "string.char",
        "string.byte", "util.Decompress", "util.Compress"
    }
    
    -- Network exploit signatures
    self.ThreatDatabase.network_signatures = {
        "Limon", "KVac", "NETMSG", "_Infinity", "SNTE_NET", "EXPLOITABLE",
        "BACKDOOR", "EXPLOIT_NET", "BYPASS_NET", "KVAC_NET", "Melon",
        "exploitable_net", "backdoor_net", "injection_net", "hack_net",
        "cheat_net", "exploit_msg", "backdoor_msg", "hack_msg",
        "admin_backdoor", "superadmin_net", "owner_net", "god_net"
    }
    
    -- Malicious domains
    self.ThreatDatabase.malicious_domains = {
        "pastebin.com", "hastebin.com", "ghostbin.com", "textbin.net",
        "paste.ee", "controlc.com", "justpaste.it", "0bin.net",
        "dpaste.com", "paste.ofcode.org", "privatebin.net", "paste.ubuntu.com",
        "termbin.com", "ix.io", "sprunge.us", "ptpb.pw"
    }
    
    -- Behavioral threat patterns
    self.ThreatDatabase.behavioral_patterns = {
        rapid_commands = {
            threshold = AntiExploit.Config.RAPID_COMMANDS_THRESHOLD,
            window = AntiExploit.Config.RAPID_COMMANDS_WINDOW
        },
        chat_spam = {
            threshold = AntiExploit.Config.CHAT_SPAM_THRESHOLD,
            window = AntiExploit.Config.CHAT_SPAM_WINDOW
        },
        rapid_spawning = {
            threshold = AntiExploit.Config.RAPID_SPAWN_THRESHOLD,
            window = AntiExploit.Config.RAPID_SPAWN_WINDOW
        },
        suspicious_movement = {speed_multiplier = 3, consistency = 0.9},
        exploit_sequence = {patterns = {"connect", "exploit", "disconnect"}},
        network_flooding = {packets_per_second = 100, duration = 5}
    }
    
    print("[Threat DB] ðŸ“š " .. #self.ThreatDatabase.workshop_threats .. " workshop threats loaded")
    print("[Threat DB] ðŸ“š " .. #self.ThreatDatabase.network_signatures .. " network signatures loaded")
    print("[Threat DB] ðŸ“š " .. #self.ThreatDatabase.malicious_domains .. " malicious domains loaded")
end

function AntiExploit:UpdateThreatDatabase()
    -- Auto-update threat patterns based on detections
    if self.ThreatIntelligence and self.ThreatIntelligence.new_patterns then
        for _, pattern in ipairs(self.ThreatIntelligence.new_patterns) do
            -- Add new patterns to database if highly confident
            if pattern and not table.HasValue(self.ThreatDatabase.network_signatures, pattern) then
                table.insert(self.ThreatDatabase.network_signatures, pattern)
            end
        end
        -- Clear processed patterns
        self.ThreatIntelligence.new_patterns = {}
    end
end